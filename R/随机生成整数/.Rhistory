# 设置默认的包安装路径
.libPaths(c("D:\r\rpk", .libPaths()))
# 获取当前包的默认路径列表
default_lib_paths <- .libPaths()
# 输出默认路径列表
print(default_lib_paths)
install.packages("metafor")
library(metafor)
install.packages("meta")
library(meta)
install.packages("dmetar")
library(dmetar)
# 安装和加载必要的包
install.packages("metafor")
library(metafor)
install.packages("ggplot2")
library(ggplot2)
library(metafor)
set.seed(123)  # 设置随机种子以保持可复现性
study_names <- paste("Study", 1:10)
effect_sizes <- rnorm(10, mean = 0.5, sd = 0.1)  # 平均效应大小为0.5，标准差为0.1
standard_errors <- runif(10, min = 0.05, max = 0.2)  # 随机生成标准误差
# 创建一个数据框
data <- data.frame(Study = study_names, EffectSize = effect_sizes, SE = standard_errors)
View(data)
# 进行 Meta 分析
res <- rma.uni(yi = EffectSize, sei = SE, data = data, method = "FE")
# 输出 Meta 分析结果
summary(res)
# 进行 Meta 分析
res <- rma.uni(yi = EffectSize, sei = SE, data = data, method = "REML")
# 输出 Meta 分析结果
summary(res)
# 绘制森林图
forest(res, slab = data$Study, xlim = c(-1, 2))
colors <- c("#FF5733", "#33FFA8", "#3366FF", "#FF33EC", "#33B2FF", "#FFB533", "#33FF4D", "#B233FF", "#FF3342", "#33E4FF")
# 绘制漂亮的森林图
forest(res, slab = data$Study, xlim = c(-1, 2), col = colors, order = order(res$yi), showweights = TRUE, atransf = exp)
# 绘制漏斗图
funnel(res)
# 绘制 Galbraith 图
galbraith(res)
# 绘制 Meta 回归图
metareg(res)
# 绘制 Meta 回归图
metareg(res)
# 绘制 Galbraith 图
galbraith(res)
# 绘制 Meta 回归图
metareg(res)
res <- rma.uni(yi = EffectSize, sei = SE, data = data, method = "REML")
# 获取模型结果
model_results <- summary(res)
# 创建一个数据框，用于绘制 Meta 回归图
meta_reg_data <- data.frame(Study = data$Study, EffectSize = model_results$beta, SE = model_results$se.beta)
res <- rma.uni(yi = EffectSize, sei = SE, data = data, method = "REML")
# 获取模型结果
model_results <- coef(res)
# 创建一个数据框，用于绘制 Meta 回归图
meta_reg_data <- data.frame(Study = data$Study, EffectSize = model_results[, "estimate"], SE = model_results[, "se"])
res <- rma.uni(yi = EffectSize, sei = SE, data = data, method = "REML")
# 使用 predict() 函数获取模型预测值
predicted_values <- predict(res, transf = exp)
# 创建一个数据框，用于绘制 Meta 回归图
meta_reg_data <- data.frame(Study = data$Study, PredictedEffectSize = predicted_values)
# 绘制 Meta 回归图
ggplot(meta_reg_data, aes(x = PredictedEffectSize, y = Study)) +
geom_point() +
geom_errorbarh(aes(xmin = PredictedEffectSize - 1.96 * SE, xmax = PredictedEffectSize + 1.96 * SE), height = 0.1) +
geom_vline(xintercept = 0, linetype = "dashed") +
labs(x = "Predicted Effect Size", y = "Study") +
theme_minimal()
# 安装和加载必要的包
install.packages("metafor")
library(metafor)
install.packages("ggplot2")
library(ggplot2)
rm(list = ls())
# 创建模拟数据
set.seed(123)  # 设置随机种子以保持可复现性
# 安装和加载必要的包
library(metafor)
library(ggplot2)
rm(list = ls())
# 创建模拟数据
set.seed(123)  # 设置随机种子以保持可复现性
# 安装和加载必要的包
library(metafor)
library(ggplot2)
rm(list = ls())
# 创建模拟数据
set.seed(123)  # 设置随机种子以保持可复现性
study_names <- paste("Study", 1:10)
effect_sizes <- rnorm(10, mean = 0.5, sd = 0.1)  # 平均效应大小为0.5，标准差为0.1
standard_errors <- runif(10, min = 0.05, max = 0.2)  # 随机生成标准误差
# 安装和加载必要的包
library(metafor)
library(ggplot2)
rm(list = ls())
# 创建模拟数据
set.seed(123)  # 设置随机种子以保持可复现性
study_names <- paste("Study", 1:10)
effect_sizes <- rnorm(10, mean = 0.5, sd = 0.1)  # 平均效应大小为0.5，标准差为0.1
standard_errors <- runif(10, min = 0.05, max = 0.2)  # 随机生成标准误差
# 创建一个数据框
data <- data.frame(Study = study_names, EffectSize = effect_sizes, SE = standard_errors)
# 进行 Meta 分析
res <- rma.uni(yi = EffectSize, sei = SE, data = data, method = "REML")
# 输出 Meta 分析结果
summary(res)
# 绘制森林图
forest(res, slab = data$Study, xlim = c(-1, 2))
# 绘制漏斗图
funnel(res)
# 绘制 Galbraith 图
galbraith(res)
# 绘制 Meta 回归图
metareg(res)
# 绘制气泡图
bubble(res, study = data$Study, xlab = "Effect Size", ylab = "Study")
ggplot(data, aes(x = EffectSize, y = Study, size = SE, color = SE)) +
geom_point() +
scale_size_continuous(range = c(3, 10)) +
labs(x = "Effect Size", y = "Study") +
theme_minimal()
View(data)
View(data)
View(res)
View(data)
# 绘制 Galbraith 图
galbraith(res)
center <- mean(data$EffectSize)
# 计算射线的长度
data$Distance <- abs(data$EffectSize - center)
# 绘制 Galbraith 图
ggplot(data, aes(x = EffectSize, y = Distance, group = Study)) +
geom_polygon(fill = "lightblue", color = "blue", alpha = 0.3) +
geom_line(aes(group = NULL), color = "blue") +
geom_point(size = 3, color = "blue") +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(x = "Effect Size", y = "Distance from Center") +
theme_minimal()
galbraith(res)
galbraith_data <- cbind(res$yi, res$sei)
# 创建一个数据框
galbraith_df <- data.frame(Study = study_names, galbraith_data)
# 绘制 Galbraith 图
ggplot(galbraith_df, aes(x = V1, y = V2, label = Study)) +
geom_point(color = "blue", size = 3) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_text(hjust = -0.2, vjust = 0.2) +
labs(x = "Effect Size", y = "Standard Error") +
theme_minimal()
# 获取模型结果中的效应大小和标准误差
effect_sizes <- res$yi
standard_errors <- res$sei
# 创建一个数据框
galbraith_df <- data.frame(Study = study_names, EffectSize = effect_sizes, SE = standard_errors)
res <- rma.uni(yi = EffectSize, sei = SE, data = data, method = "REML")
# 获取模型结果中的效应大小和标准误差
effect_sizes <- res$yi
standard_errors <- res$sei
# 创建一个数据框
galbraith_df <- data.frame(Study = study_names, EffectSize = effect_sizes, SE = standard_errors)
# 绘制 Galbraith 图
galbraith(res)
data(Olkin95)
meta1 <- metabin(event.e, n.e, event.c, n.c, data=Olkin95, sm="RR")
library(meta)
data(Olkin95)
meta1 <- metabin(event.e, n.e, event.c, n.c, data=Olkin95, sm="RR")
radial(meta1, level=0.95)
radial(res, level=0.95)
View(meta1)
summary(res)
summary(metal)
metal
summary(meta1)
View(data)
Olkin95
View(Olkin95)
radial(meta1, level=0.95)
# 安装和加载必要的包
library(metafor)
library(ggplot2)
library(meta)
rm(list = ls())
# 载入 Olkin95 数据集
data(Olkin95)
# 进行二分类数据的 Meta 分析
meta_result <- metabin(event.e, n.e, event.c, n.c, data = Olkin95, method = "MH")
# 查看 Meta 分析结果摘要
summary(meta_result)
# 绘制森林图
forest(meta_result)
# 绘制漏斗图
funnel(meta_result)
# 绘制森林图
forest(meta_result)
# 创建气泡图
ggplot(meta_result$data, aes(x = yi, y = author, size = sei)) +
geom_point() +
labs(title = "Meta分析气泡图", x = "效应量", y = "研究") +
theme_minimal()
# 安装和加载必要的包
library(metafor)
library(ggplot2)
library(meta)
rm(list = ls())
# 载入 Olkin95 数据集
data(Olkin95)
# 进行二分类数据的 Meta 分析
meta_result <- metabin(event.e, n.e, event.c, n.c, data = Olkin95, method = "MH")
# 查看 Meta 分析结果摘要
summary(meta_result)
# 绘制森林图
forest(meta_result)
# 绘制漏斗图
funnel(meta_result)
# 随机生成20篇文献的原始数据
set.seed(123)  # 设置随机种子以保持可复现性
n_studies <- 20
study_names <- paste("Study", 1:n_studies)
group1_mean <- rnorm(n_studies, mean = 10, sd = 2)
group1_sd <- runif(n_studies, min = 1, max = 3)
group2_mean <- rnorm(n_studies, mean = 12, sd = 2)
group2_sd <- runif(n_studies, min = 1, max = 3)
n1 <- round(runif(n_studies, min = 30, max = 50))
n2 <- round(runif(n_studies, min = 30, max = 50))
library(meta)
# 随机生成20篇文献的原始数据
set.seed(123)  # 设置随机种子以保持可复现性
n_studies <- 20
study_names <- paste("Study", 1:n_studies)
group1_mean <- rnorm(n_studies, mean = 10, sd = 2)
group1_sd <- runif(n_studies, min = 1, max = 3)
group2_mean <- rnorm(n_studies, mean = 12, sd = 2)
group2_sd <- runif(n_studies, min = 1, max = 3)
n1 <- round(runif(n_studies, min = 30, max = 50))
n2 <- round(runif(n_studies, min = 30, max = 50))
library(meta)
rm(is=())
library(meta)
rm(list=is))
library(meta)
rm(list=is()))
rm(list=ls())
# 随机生成20篇文献的原始数据
set.seed(123)  # 设置随机种子以保持可复现性
n_studies <- 20
study_names <- paste("Study", 1:n_studies)
group1_mean <- rnorm(n_studies, mean = 10, sd = 2)
group1_sd <- runif(n_studies, min = 1, max = 3)
group2_mean <- rnorm(n_studies, mean = 12, sd = 2)
group2_sd <- runif(n_studies, min = 1, max = 3)
n1 <- round(runif(n_studies, min = 30, max = 50))
n2 <- round(runif(n_studies, min = 30, max = 50))
rm(list=is())
rm(list=is())
rm(list = ls())
rm(list = is())
rm(list = ls())
# 设置随机数种子，以便结果可以复现
set.seed(123)
# 生成满足平均数和标准差的正态分布随机数
mean_target <- 5.2
sd_target <- 2.4
num_values <- 100  # 生成100个整数
# 生成满足条件的随机数
random_numbers <- rnorm(num_values, mean = mean_target, sd = sd_target)
# 将随机数四舍五入为整数
random_integers <- round(random_numbers)
# 输出结果
print(random_integers)
cat("实际平均数:", mean(random_integers), "\n")
cat("实际标准差:", sd(random_integers))
rm(list=is())
rm( list=ls())
# 设置随机数种子，以便结果可以复现
set.seed(123)
# 生成的整数数量
num_values <- 101
# 生成符合条件的整数序列
generate_custom_integers <- function(n, mean_target, sd_target, min_value, max_value) {
while (TRUE) {
random_integers <- round(rnorm(n, mean = mean_target, sd = sd_target))
random_integers <- pmax(pmin(random_integers, max_value), min_value)
if (mean(random_integers) >= (mean_target - 0.1) && mean(random_integers) <= (mean_target + 0.1)) {
return(random_integers)
}
}
}
# 调用函数生成整数序列
random_integers <- generate_custom_integers(num_values, mean_target = 5.2, sd_target = 2.4, min_value = 1, max_value = 7)
# 输出结果
print(random_integers)
cat("实际平均数:", mean(random_integers), "\n")
cat("实际标准差:", sd(random_integers), "\n")
cat("最小值:", min(random_integers), "\n")
cat("最大值:", max(random_integers))
df[,1]=random_integers
# 调用函数生成整数序列
random_integers1 <- generate_custom_integers(num_values, mean_target = 5.2, sd_target = 2.4, min_value = 1, max_value = 7)
random_integers2 <- generate_custom_integers(num_values, mean_target = 4.4, sd_target = 2.7, min_value = 1, max_value = 7)
rm( list=ls())
# 设置随机数种子，以便结果可以复现
set.seed(123)
# 生成的整数数量
num_values <- 101
# 生成符合条件的整数序列
generate_custom_integers <- function(n, mean_target, sd_target, min_value, max_value) {
while (TRUE) {
random_integers <- round(rnorm(n, mean = mean_target, sd = sd_target))
random_integers <- pmax(pmin(random_integers, max_value), min_value)
if (mean(random_integers) >= (mean_target - 0.1) && mean(random_integers) <= (mean_target + 0.1)) {
return(random_integers)
}
}
}
# 调用函数生成整数序列
random_integers1 <- generate_custom_integers(num_values, mean_target = , sd_target = 2.4, min_value = 1, max_value = 7)
random_integers2 <- generate_custom_integers(num_values, mean_target = 4.4, sd_target = 2.7, min_value = 1, max_value = 7)
random_integers3 <- generate_custom_integers(num_values, mean_target = 4.2, sd_target = 2.4, min_value = 1, max_value = 7)
# 调用函数生成整数序列
random_integers1 <- generate_custom_integers(num_values, mean_target = , sd_target = 2.4, min_value = 1, max_value = 7)
# 调用函数生成整数序列
random_integers1 <- generate_custom_integers(num_values, mean_target =5.90, sd_target = 2.84, min_value = 1, max_value = 8)
random_integers2 <- generate_custom_integers(num_values, mean_target = 5.56, sd_target = 2.17, min_value = 1, max_value = 8)
random_integers3 <- generate_custom_integers(num_values, mean_target = 4.2, sd_target = 2.3, min_value = 1, max_value = 8)
library(dplyr)
rm( list=ls())
# 设置随机数种子，以便结果可以复现
set.seed(123)
# 生成的整数数量
num_values <- 101
# 生成符合条件的整数序列
generate_custom_integers <- function(n, mean_target, sd_target, min_value, max_value) {
while (TRUE) {
random_integers <- round(rnorm(n, mean = mean_target, sd = sd_target))
random_integers <- pmax(pmin(random_integers, max_value), min_value)
if (mean(random_integers) >= (mean_target - 0.1) && mean(random_integers) <= (mean_target + 0.1)) {
return(random_integers)
}
}
}
# 输出结果
print(random_integers)
# 设置随机数种子，以便结果可以复现
set.seed(123)
# 生成的整数数量
num_values <- 101
# 生成符合条件的整数序列
generate_custom_integers <- function(n, mean_target, sd_target, min_value, max_value) {
while (TRUE) {
random_integers <- round(rnorm(n, mean = mean_target, sd = sd_target))
random_integers <- pmax(pmin(random_integers, max_value), min_value)
if (mean(random_integers) >= (mean_target - 0.1) && mean(random_integers) <= (mean_target + 0.1)) {
return(random_integers)
}
}
}
# 调用函数生成整数序列
random_integers1 <- generate_custom_integers(num_values, mean_target =5.90, sd_target = 2.84, min_value = 1, max_value = 8)
random_integers2 <- generate_custom_integers(num_values, mean_target = 5.56, sd_target = 2.17, min_value = 1, max_value = 8)
random_integers3 <- generate_custom_integers(num_values, mean_target = 4.2, sd_target = 2.3, min_value = 1, max_value = 8)
# 输出结果
print(random_integers)
# 输出结果
print(random_integers1)
cat("实际平均数:", mean(random_integers), "\n")
# 输出结果
print(random_integers1)
cat("实际平均数:", mean(random_integers1), "\n")
cat("实际标准差:", sd(random_integers1), "\n")
cat("最小值:", min(random_integers1), "\n")
cat("最大值:", max(random_integers1))
# 输出结果
print(random_integers1)
cat("实际平均数:", mean(random_integers1), "\n")
cat("实际标准差:", sd(random_integers2), "\n")
cat("最小值:", min(random_integers1), "\n")
cat("最大值:", max(random_integers1))
# 输出结果
print(random_integers1)
cat("实际平均数:", mean(random_integers2), "\n")
cat("实际标准差:", sd(random_integers2), "\n")
cat("最小值:", min(random_integers1), "\n")
cat("最大值:", max(random_integers1))
# 输出结果
print(random_integers1)
cat("实际平均数:", mean(random_integers2), "\n")
cat("实际标准差:", sd(random_integers2), "\n")
# 输出结果
print(random_integers1)
cat("实际平均数:", mean(random_integers3), "\n")
cat("实际标准差:", sd(random_integers3), "\n")
data <- data.frame(
Sequence = 1:num_values,
RandomIntegers1 = random_integers1,
RandomIntegers2 = random_integers2,
RandomIntegers3 = random_integers3
)
# 将数据框保存为CSV文件（也可以选择其他格式）
write.csv(data, "random_integers_database.csv", row.names = FALSE)
df=read.csv("random_integers_database.csv")
View(df)
library(dplyr)
rm( list=ls())
# 设置随机数种子，以便结果可以复现
set.seed(123)
# 生成的整数数量
num_values <- 101
# 生成符合条件的整数序列
generate_custom_integers <- function(n, mean_target, sd_target, min_value, max_value) {
while (TRUE) {
random_integers <- round(rnorm(n, mean = mean_target, sd = sd_target))
random_integers <- pmax(pmin(random_integers, max_value), min_value)
if (mean(random_integers) >= (mean_target - 0.1) && mean(random_integers) <= (mean_target + 0.1)) {
return(random_integers)
}
}
}
# 调用函数生成整数序列
random_integers1 <- generate_custom_integers(num_values, mean_target =5.90, sd_target = 2.84, min_value = 1, max_value = 8)
random_integers2 <- generate_custom_integers(num_values, mean_target = 5.56, sd_target = 2.17, min_value = 1, max_value = 8)
random_integers3 <- generate_custom_integers(num_values, mean_target = 4.2, sd_target = 2.3, min_value = 1, max_value = 8)
# 输出结果
print(random_integers1)
cat("实际平均数:", mean(random_integers3), "\n")
cat("实际标准差:", sd(random_integers3), "\n")
data <- data.frame(
Sequence = 1:num_values,
RandomIntegers1 = random_integers1,
RandomIntegers2 = random_integers2,
RandomIntegers3 = random_integers3
)
# 将数据框保存为CSV文件（也可以选择其他格式）
write.csv(data, "random_integers_database.csv", row.names = FALSE)
# 输出结果
print(random_integers1)
cat("实际平均数:", mean(random_integers3), "\n")
cat("实际标准差:", sd(random_integers3), "\n")
random_integers2 <- generate_custom_integers(num_values, mean_target = 5.56, sd_target = 2.17, min_value = 1, max_value = 8)
random_integers3 <- generate_custom_integers(num_values, mean_target = 4.2, sd_target = 2.3, min_value = 1, max_value = 8)
cor_test_result <- cor.test(a, b)
# 假设你已经有了数据a和数据b，将它们存储在两个向量中
# 请将下面的示例数据替换为你的实际数据
a <- df1$`Global score`
cor_test_result <- cor.test(a, b)
df0 <- read_xlsx("ALL.xlsx")
library(forestplot)
library(betareg)
library(sjPlot)
library(corrplot)
library(officer)
library(flextable)
library(table1)
library(boot)
library(ggplot2)
library(readxl)
library(bruceR)
library(corrplot)
library(RColorBrewer)
library(reshape2)
library(foreign)
library(ggplot2)
library(grid)
library(gridExtra)
library(ggpubr)
library(cowplot)
library(ggplot2)
library(readxl)
library(graphics)
library(PerformanceAnalytics)
library(sjPlot)
library(reshape2)
library(dplyr)
library(ggplot2)
library(readxl)
library(gridExtra)
rm(list = ls())#清空数据
df0 <- read_xlsx("ALL.xlsx")
