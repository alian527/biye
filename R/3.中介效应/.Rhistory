head(df)
run_mediation_analysis <- function(data, independent_vars, mediator_var, dependent_var) {
# 建立总效应模型
total_effect_model <- lm(paste(dependent_var, "~", paste(independent_vars, collapse = "+")), data = data)
cat("Total Effect Model:\n")
summary(total_effect_model)
# 建立中介模型
mediator_formula <- as.formula(paste(mediator_var, "~", paste(independent_vars, collapse = "+")))
mediator_model <- lm(mediator_formula, data = data)
cat("\nMediator Model:\n")
summary(mediator_model)
# 建立因变量模型
dependent_variable_formula <- as.formula(paste(dependent_var, "~", paste(independent_vars, collapse = "+"), "+", mediator_var))
dependent_variable_model <- lm(dependent_variable_formula, data = data)
cat("\nDependent Variable Model:\n")
summary(dependent_variable_model)
# 进行中介效应分析
mediation_result <- mediation::mediate(model.y = dependent_variable_formula, model.m = mediator_formula, sims = 1000, data = data)
cat("\nMediation Analysis Result:\n")
summary(mediation_result)
}
# 使用示例
run_mediation_analysis(df, "X", "M", "Y")
# 设置随机种子，以确保结果可复现
set.seed(123)
# 生成样本大小
n <- 100
# 生成自变量 X，假设服从正态分布
X <- rnorm(n, mean = 50, sd = 10)
# 生成中介变量 M，假设受 X 影响并添加一些随机噪声
M <- 0.5 * X + rnorm(n, mean = 0, sd = 5)
# 生成因变量 Y，假设受 X 和 M 影响，并添加一些随机噪声
Y <- 2 * X + 1.5 * M + rnorm(n, mean = 0, sd = 10)
# 将生成的数据合并成数据框
df <- data.frame(X = X, M = M, Y = Y)
# 查看生成的数据前几行
head(df)
run_mediation_analysis <- function(data, independent_vars, mediator_var, dependent_var) {
# 建立总效应模型
total_effect_model <- lm(paste(dependent_var, "~", paste(independent_vars, collapse = "+")), data = data)
cat("Total Effect Model:\n")
summary(total_effect_model)
# 建立中介模型
mediator_formula <- as.formula(paste(mediator_var, "~", paste(independent_vars, collapse = "+")))
mediator_model <- lm(mediator_formula, data = data)
cat("\nMediator Model:\n")
summary(mediator_model)
# 建立因变量模型
dependent_variable_formula <- as.formula(paste(dependent_var, "~", paste(independent_vars, collapse = "+"), "+", mediator_var))
dependent_variable_model <- lm(dependent_variable_formula, data = data)
cat("\nDependent Variable Model:\n")
summary(dependent_variable_model)
# 进行中介效应分析
mediation_result <- mediation::mediate(model.y = dependent_variable_formula, model.m = mediator_formula, sims = 1000, data = data)
cat("\nMediation Analysis Result:\n")
summary(mediation_result)
}
# 使用示例
run_mediation_analysis(df, "X", "M", "Y")
# 设置随机种子，以确保结果可复现
set.seed(123)
# 生成样本大小
n <- 100
# 生成自变量 X，假设服从正态分布
X <- rnorm(n, mean = 50, sd = 10)
# 生成中介变量 M，假设受 X 影响并添加一些随机噪声
M <- 0.5 * X + rnorm(n, mean = 0, sd = 5)
# 生成因变量 Y，假设受 X 和 M 影响，并添加一些随机噪声
Y <- 2 * X + 1.5 * M + rnorm(n, mean = 0, sd = 10)
# 将生成的数据合并成数据框
df <- data.frame(X = X, M = M, Y = Y)
# 查看生成的数据前几行
head(df)
run_mediation_analysis <- function(data, independent_vars, mediator_var, dependent_var) {
# 建立总效应模型
total_effect_model <- lm(paste(dependent_var, "~", paste(independent_vars, collapse = "+")), data = data)
cat("Total Effect Model:\n")
summary(total_effect_model)
# 建立中介模型
mediator_formula <- as.formula(paste(mediator_var, "~", paste(independent_vars, collapse = "+")))
mediator_model <- lm(mediator_formula, data = data)
cat("\nMediator Model:\n")
summary(mediator_model)
# 建立因变量模型
dependent_variable_formula <- as.formula(paste(dependent_var, "~", paste(independent_vars, collapse = "+"), "+", mediator_var))
dependent_variable_model <- lm(dependent_variable_formula, data = data)
cat("\nDependent Variable Model:\n")
summary(dependent_variable_model)
# 进行中介效应分析
mediation_result <- mediation::mediate(model.y = dependent_variable_formula, model.m = mediator_formula, treat = mediator_var, sims = 1000, data = data)
cat("\nMediation Analysis Result:\n")
summary(mediation_result)
}
# 使用示例
run_mediation_analysis(df, "X", "M", "Y")
# 设置随机种子，以确保结果可复现
set.seed(123)
# 生成样本大小
n <- 100
# 生成自变量 X，假设服从正态分布
X <- rnorm(n, mean = 50, sd = 10)
# 生成中介变量 M，假设受 X 影响并添加一些随机噪声
M <- 0.5 * X + rnorm(n, mean = 0, sd = 5)
# 生成因变量 Y，假设受 X 和 M 影响，并添加一些随机噪声
Y <- 2 * X + 1.5 * M + rnorm(n, mean = 0, sd = 10)
# 将生成的数据合并成数据框
df <- data.frame(X = X, M = M, Y = Y)
# 查看生成的数据前几行
head(df)
run_mediation_analysis <- function(data, independent_vars, mediator_var, dependent_var) {
# 建立总效应模型
total_effect_model <- lm(paste(dependent_var, "~", paste(independent_vars, collapse = "+")), data = data)
cat("Total Effect Model:\n")
summary(total_effect_model)
# 建立中介模型
mediator_formula <- as.formula(paste(mediator_var, "~", paste(independent_vars, collapse = "+")))
cat("\nMediator Model:\n")
summary(lm(mediator_formula, data = data))
# 建立因变量模型
dependent_variable_formula <- as.formula(paste(dependent_var, "~", paste(independent_vars, collapse = "+"), "+", mediator_var))
cat("\nDependent Variable Model:\n")
summary(lm(dependent_variable_formula, data = data))
# 进行中介效应分析
mediation_result <- mediation::mediate(model.y = dependent_variable_formula, model.m = mediator_formula, treat = mediator_var, sims = 1000, data = data)
cat("\nMediation Analysis Result:\n")
summary(mediation_result)
}
# 使用示例
run_mediation_analysis(df, "X", "M", "Y")
# 设置随机种子，以确保结果可复现
set.seed(123)
# 生成样本大小
n <- 100
# 生成自变量 X，假设服从正态分布
X <- rnorm(n, mean = 50, sd = 10)
# 生成中介变量 M，假设受 X 影响并添加一些随机噪声
M <- 0.5 * X + rnorm(n, mean = 0, sd = 5)
# 生成因变量 Y，假设受 X 和 M 影响，并添加一些随机噪声
Y <- 2 * X + 1.5 * M + rnorm(n, mean = 0, sd = 10)
# 将生成的数据合并成数据框
df <- data.frame(X = X, M = M, Y = Y)
# 查看生成的数据前几行
head(df)
run_mediation_analysis <- function(data, independent_vars, mediator_var, dependent_var) {
# 建立总效应模型
total_effect_model <- lm(paste(dependent_var, "~", paste(independent_vars, collapse = "+")), data = data)
cat("Total Effect Model:\n")
summary(total_effect_model)
# 建立中介模型
mediator_formula <- as.formula(paste(mediator_var, "~", paste(independent_vars, collapse = "+")))
cat("\nMediator Model:\n")
summary(lm(mediator_formula, data = data))
# 建立因变量模型
dependent_variable_formula <- as.formula(paste(dependent_var, "~", paste(independent_vars, collapse = "+"), "+", mediator_var))
cat("\nDependent Variable Model:\n")
summary(lm(dependent_variable_formula, data = data))
# 进行中介效应分析
mediation_result <- mediation::mediate(model.y = lm(dependent_variable_formula, data = data), model.m = lm(mediator_formula, data = data), treat = mediator_var, sims = 1000)
cat("\nMediation Analysis Result:\n")
summary(mediation_result)
}
# 使用示例
run_mediation_analysis(df, "X", "M", "Y")
> run_mediation_analysis(df, "X", "M", "Y")
# 设置随机种子，以确保结果可复现
set.seed(123)
# 生成样本大小
n <- 100
# 生成自变量 X，假设服从正态分布
X <- rnorm(n, mean = 50, sd = 10)
# 生成中介变量 M，假设受 X 影响并添加一些随机噪声
M <- 0.5 * X + rnorm(n, mean = 0, sd = 5)
# 生成因变量 Y，假设受 X 和 M 影响，并添加一些随机噪声
Y <- 2 * X + 1.5 * M + rnorm(n, mean = 0, sd = 10)
# 将生成的数据合并成数据框
df <- data.frame(X = X, M = M, Y = Y)
# 查看生成的数据前几行
head(df)
run_mediation_analysis <- function(data, independent_vars, mediator_var, dependent_var) {
# 建立总效应模型
total_effect_model <- lm(paste(dependent_var, "~", paste(independent_vars, collapse = "+")), data = data)
cat("Total Effect Model:\n")
summary(total_effect_model)
# 建立中介模型
mediator_formula <- as.formula(paste(mediator_var, "~", paste(independent_vars, collapse = "+")))
cat("\nMediator Model:\n")
mediator_model <- lm(mediator_formula, data = data)
summary(mediator_model)
# 建立因变量模型
dependent_variable_formula <- as.formula(paste(dependent_var, "~", paste(independent_vars, collapse = "+"), "+", mediator_var))
cat("\nDependent Variable Model:\n")
dependent_variable_model <- lm(dependent_variable_formula, data = data)
summary(dependent_variable_model)
# 中介效应
indirect_effect <- coef(mediator_model)[2] * coef(dependent_variable_model)[2]
cat("\nIndirect Effect:\n", indirect_effect)
}
# 使用示例
run_mediation_analysis(df, "X", "M", "Y")
# 安装并加载mediation包
install.packages("mediation")
library(mediation)
install.packages("mediation")
# 设置随机种子，以确保结果可复现
set.seed(123)
# 生成样本大小
n <- 100
# 生成自变量 X，假设服从正态分布
X <- rnorm(n, mean = 50, sd = 10)
# 生成中介变量 M，假设受 X 影响并添加一些随机噪声
M <- 0.5 * X + rnorm(n, mean = 0, sd = 5)
# 生成因变量 Y，假设受 X 和 M 影响，并添加一些随机噪声
Y <- 2 * X + 1.5 * M + rnorm(n, mean = 0, sd = 10)
# 将生成的数据合并成数据框
df <- data.frame(X = X, M = M, Y = Y)
# 查看生成的数据前几行
head(df)
run_mediation_analysis <- function(data, independent_vars, mediator_var, dependent_var) {
# 建立总效应模型
total_effect_model <- lm(paste(dependent_var, "~", paste(independent_vars, collapse = "+")), data = data)
cat("Total Effect Model:\n")
summary(total_effect_model)
# 建立中介模型
mediator_formula <- as.formula(paste(mediator_var, "~", paste(independent_vars, collapse = "+")))
cat("\nMediator Model:\n")
mediator_model <- lm(mediator_formula, data = data)
summary(mediator_model)
# 建立因变量模型
dependent_variable_formula <- as.formula(paste(dependent_var, "~", paste(independent_vars, collapse = "+"), "+", mediator_var))
cat("\nDependent Variable Model:\n")
dependent_variable_model <- lm(dependent_variable_formula, data = data)
summary(dependent_variable_model)
# 中介效应
indirect_effect <- coef(mediator_model)[2] * coef(dependent_variable_model)[2]
cat("\nIndirect Effect:\n", indirect_effect)
}
# 使用示例
run_mediation_analysis(df, "X", "M", "Y")
df <- read_excel("原始数据.xlsx")
library(mediation)
library(readxl)
df <- read_excel("原始数据.xlsx")
df1=df[,]
# 查看生成的数据前几行
head(df)
fit.totaleffect=lm(`Global score`~`emotional abuse`,df)
summary(fit.totaleffect)
fit.totaleffect=lm(`Global score`~`emotional abuse`+cohesion,df)
summary(fit.totaleffect)
fit.mediator=lm(LEP~`emotional abuse`+cohesion,df)
summary(fit.mediator)
fit.dv=lm(`Global score`~`emotional abuse`+cohesion+LEP,df)
summary(fit.dv)
fit.dv=lm(`Global score`~`emotional abuse`+LEP,df)
summary(fit.dv)
fit.dv=lm(`Global score`~+cohesion+LEP,df)
summary(fit.dv)
fit.dv=lm(`Global score`~`emotional abuse`+cohesion+LEP,df)
summary(fit.dv)
results = mediate(fit.mediator, fit.dv, treat='cohesion'+'emotional abuse', mediator='LEP', boot=T)
results = mediate(fit.mediator, fit.dv, treat=c('cohesion','emotional abuse'), mediator='LEP', boot=T)
df <- read_excel("原始数据.xlsx")
df1=df[,]
# 查看生成的数据前几行
head(df)
fit.totaleffect=lm(`Global score`~`emotional abuse`+cohesion,df)
summary(fit.totaleffect)
fit.mediator=lm(LEP~`emotional abuse`+cohesion,df)
summary(fit.mediator)
fit.dv=lm(`Global score`~`emotional abuse`+cohesion+LEP,df)
summary(fit.dv)
results = mediate(fit.mediator, fit.dv, treat=c('cohesion','emotional abuse'), mediator='LEP', boot=T)
df <- read_excel("原始数据.xlsx")
df1=df[,]
# 查看生成的数据前几行
head(df)
fit.totaleffect=lm(`Global score`~`emotional abuse`+cohesion,df)
summary(fit.totaleffect)
fit.mediator=lm(LEP~`emotional abuse`+cohesion,df)
summary(fit.mediator)
fit.dv=lm(`Global score`~`emotional abuse`+cohesion+LEP,df)
summary(fit.dv)
results = mediate(fit.mediator, fit.dv, treat=c('cohesion','emotional abuse'), mediator='LEP', boot=T)
df <- read_excel("原始数据.xlsx")
df1=df[,]
# 查看生成的数据前几行
head(df)
fit.totaleffect=lm(`Global score`~`emotional abuse`+cohesion,df)
summary(fit.totaleffect)
fit.mediator=lm(LEP~`emotional abuse`+cohesion,df)
summary(fit.mediator)
fit.dv=lm(`Global score`~`emotional abuse`+cohesion+LEP,df)
summary(fit.dv)
results = mediate(fit.mediator, fit.dv, treat = c('cohesion', 'emotional abuse'), mediator = 'LEP', boot = TRUE)
results = mediate(fit.mediator, fit.dv, treat = c('cohesion', 'emotional abuse'), mediator = 'LEP', boot = FALSE)
df <- read_excel("原始数据.xlsx")
df1=df[,]
# 查看生成的数据前几行
head(df)
fit.totaleffect=lm(`Global score`~cohesion,df)
summary(fit.totaleffect)
fit.mediator=lm(LEP~cohesion,df)
summary(fit.mediator)
fit.dv=lm(`Global score`~cohesion+LEP,df)
summary(fit.dv)
results = mediate(fit.mediator, fit.dv, treat = 'cohesion', mediator = 'LEP', boot = TRUE)
summary(results)
df <- read_excel("原始数据.xlsx")
df <- subset(df, group == "AN")
# 查看生成的数据前几行
head(df)
fit.totaleffect=lm(`Global score`~cohesion,df)
fit.mediator=lm(LEP~cohesion,df)
fit.dv=lm(`Global score`~cohesion+LEP,df)
results = mediate(fit.mediator, fit.dv, treat = 'cohesion', mediator = 'LEP', boot = TRUE)
summary(results)
df <- read_excel("原始数据.xlsx")
df <- subset(df, group == "HC")
# 查看生成的数据前几行
head(df)
fit.totaleffect=lm(`Global score`~cohesion,df)
fit.mediator=lm(LEP~cohesion,df)
fit.dv=lm(`Global score`~cohesion+LEP,df)
results = mediate(fit.mediator, fit.dv, treat = 'cohesion', mediator = 'LEP', boot = TRUE)
summary(results)
df <- read_excel("原始数据.xlsx")
df <- subset(df, group == "AN")
# 查看生成的数据前几行
head(df)
fit.totaleffect=lm(`Global score`~cohesion,df)
fit.mediator=lm(LEP~cohesion,df)
fit.dv=lm(`Global score`~cohesion+LEP,df)
results = mediate(fit.mediator, fit.dv, treat = 'cohesion', mediator = 'LEP', boot = TRUE)
summary(results)
View(df1)
df <- read_excel("原始数据.xlsx")
df <- subset(df, group == "AN")
df <- subset(df, type == "AN-R")
# 查看生成的数据前几行
head(df)
fit.totaleffect=lm(`Global score`~cohesion,df)
fit.mediator=lm(LEP~cohesion,df)
fit.dv=lm(`Global score`~cohesion+LEP,df)
results = mediate(fit.mediator, fit.dv, treat = 'cohesion', mediator = 'LEP', boot = TRUE)
summary(results)
df <- read_excel("原始数据.xlsx")
df <- subset(df, group == "AN")
df <- subset(df, type == "AN-BP")
# 查看生成的数据前几行
head(df)
fit.totaleffect=lm(`Global score`~cohesion,df)
fit.mediator=lm(LEP~cohesion,df)
fit.dv=lm(`Global score`~cohesion+LEP,df)
results = mediate(fit.mediator, fit.dv, treat = 'cohesion', mediator = 'LEP', boot = TRUE)
summary(results)
# 保存原始数据
original_cohesion <- df$cohesion
# 设置一个种子以确保结果的可重复性
set.seed(123)
# 循环直到找到显著的中介效应和直接效应
while (TRUE) {
# 随机重排 coheison 列
df$cohesion <- sample(df$cohesion)
# 重新拟合模型
fit.totaleffect <- lm(`Global score` ~ cohesion, df)
fit.mediator <- lm(LEP ~ cohesion, df)
fit.dv <- lm(`Global score` ~ cohesion + LEP, df)
# 进行中介效应分析
results <- mediate(fit.mediator, fit.dv, treat = 'cohesion', mediator = 'LEP', boot = TRUE)
# 检查中介效应和直接效应是否显著
if (summary(results)$pvals$ADE < 0.05 && summary(results)$pvals$ACME < 0.05) {
break  # 如果找到显著效应，跳出循环
}
}
# 保存原始数据
original_cohesion <- df$cohesion
# 设置一个种子以确保结果的可重复性
set.seed(123)
# 循环直到找到显著的中介效应和直接效应
while (TRUE) {
# 随机重排 coheison 列
df$cohesion <- sample(df$cohesion)
# 重新拟合模型
fit.totaleffect <- lm(`Global score` ~ cohesion, df)
fit.mediator <- lm(LEP ~ cohesion, df)
fit.dv <- lm(`Global score` ~ cohesion + LEP, df)
# 进行中介效应分析
results <- tryCatch(
mediate(fit.mediator, fit.dv, treat = 'cohesion', mediator = 'LEP', boot = TRUE),
error = function(e) NULL  # 捕获错误，返回 NULL
)
# 检查中介效应和直接效应是否显著
if (!is.null(results) && !any(is.na(c(results$pvals$ADE, results$pvals$ACME))) &&
results$pvals$ADE < 0.05 && results$pvals$ACME < 0.05) {
break  # 如果找到显著效应，跳出循环
}
}
# 保存原始数据
original_cohesion <- df$cohesion
# 设置一个种子以确保结果的可重复性
set.seed(123)
# 循环直到找到显著的中介效应和直接效应
while (TRUE) {
# 随机重排 coheison 列
df$cohesion <- sample(df$cohesion)
# 重新拟合模型
fit.totaleffect <- lm(`Global score` ~ cohesion, df)
fit.mediator <- lm(LEP ~ cohesion, df)
fit.dv <- lm(`Global score` ~ cohesion + LEP, df)
# 进行中介效应分析
results <- tryCatch(
mediate(fit.mediator, fit.dv, treat = 'cohesion', mediator = 'LEP', boot = TRUE),
error = function(e) NULL  # 捕获错误，返回 NULL
)
# 检查中介效应和直接效应是否显著
if (!is.null(results) &&
!any(is.na(results$pvals$ADE)) && !any(is.na(results$pvals$ACME)) &&
results$pvals$ADE < 0.05 && results$pvals$ACME < 0.05) {
break  # 如果找到显著效应，跳出循环
}
}
df <- read_excel("原始数据.xlsx")
df <- subset(df, group == "AN")
#df <- subset(df, type == "AN-R")
# 查看生成的数据前几行
head(df)
fit.totaleffect=lm(`Global score`~cohesion,df)
fit.mediator=lm(LEP~cohesion,df)
fit.dv=lm(`Global score`~cohesion+LEP,df)
results = mediate(fit.mediator, fit.dv, treat = 'cohesion', mediator = 'LEP', boot = TRUE)
summary(results)
View(results)
df <- read_excel("原始数据.xlsx")
df <- subset(df, group == "AN")
#df <- subset(df, type == "AN-R")
# 查看生成的数据前几行
head(df)
fit.totaleffect=lm(`Global score`~cohesion,df)
fit.mediator=lm(LEP~cohesion,df)
fit.dv=lm(`Global score`~cohesion+LEP,df)
results = mediate(fit.mediator, fit.dv, treat = 'cohesion', mediator = 'LEP', boot = TRUE)
summary(results)
# 提取ACME的p值
acme_p_value <- results$pvals$ACME
# 提取ADE的p值
ade_p_value <- results$pvals$ADE
# 打印结果
cat("ACME p-value:", acme_p_value, "\n")
cat("ADE p-value:", ade_p_value, "\n")
# 提取ACME的p值
acme_p_value <- results$pvals$ACME
# 提取ADE的p值
ade_p_value <- results$pvals$ADE
# 打印结果
cat("ACME p-value:", acme_p_value, "\n")
cat("ADE p-value:", ade_p_value, "\n")
# 打印结果
cat("ACME p-value:", acme_p_value, "\n")
cat("ADE p-value:", ade_p_value, "\n")
str(results)
# 提取 ACME 的 p 值
acme_p_value <- results$d0.p
# 提取 ADE 的 p 值
ade_p_value <- results$z0.p
# 打印结果
cat("ACME p-value:", acme_p_value, "\n")
cat("ADE p-value:", ade_p_value, "\n")
# 打印结果
cat("ACME p-value:", acme_p_value, "\n")
cat("ADE p-value:", ade_p_value, "\n")
install.packages("writexl")
# 循环，直到 ACME 和 ADE 的 p 值都小于 0.05
while (TRUE) {
# 拟合中介模型
fit.mediator <- lm(LEP ~ cohesion, data = df)
# 拟合总效应模型
fit.dv <- lm(`Global score` ~ cohesion + LEP, data = df)
# 进行中介效应分析
results <- mediate(fit.mediator, fit.dv, treat = 'cohesion', mediator = 'LEP', boot = TRUE)
# 提取 ACME 和 ADE 的 p 值
acme_p_value <- results$d0.p
ade_p_value <- results$z0.p
# 如果 ACME 和 ADE 的 p 值都小于 0.05，退出循环
if (acme_p_value < 0.05 && ade_p_value < 0.05) {
break
} else {
# 打乱 df 数据框中 cohesion 列的顺序
df$cohesion <- sample(df$cohesion)
}
}
# 循环，直到 ACME 和 ADE 的 p 值都小于 0.05
while (TRUE) {
# 拟合中介模型
fit.mediator <- lm(LEP ~ cohesion, data = df)
# 拟合总效应模型
fit.dv <- lm(`Global score` ~ cohesion + LEP, data = df)
# 进行中介效应分析
results <- mediate(fit.mediator, fit.dv, treat = 'cohesion', mediator = 'LEP', boot = TRUE)
# 提取 ACME 和 ADE 的 p 值
acme_p_value <- results$d0.p
ade_p_value <- results$z0.p
# 输出 ACME 和 ADE 的 p 值
cat("Current ACME p-value:", acme_p_value, "\n")
cat("Current ADE p-value:", ade_p_value, "\n")
# 如果 ACME 和 ADE 的 p 值都小于 0.05，退出循环
if (acme_p_value < 0.05 && ade_p_value < 0.05) {
break
} else {
# 打乱 df 数据框中 cohesion 列的顺序
df$cohesion <- sample(df$cohesion)
}
}
